package com.example.project_3;

import android.app.Activity;
import android.app.Instrumentation;
import android.content.Intent;
import android.os.Build;
import android.view.View;
import android.widget.ListView;
import androidx.test.core.app.ActivityScenario;
import androidx.test.espresso.intent.Intents;
import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.platform.app.InstrumentationRegistry;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import static androidx.test.espresso.Espresso.onView;
import static androidx.test.espresso.action.ViewActions.click;
import static androidx.test.espresso.matcher.ViewMatchers.assertThat;
import static androidx.test.espresso.matcher.ViewMatchers.withId;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.notNullValue;

import com.example.project_3.AttendeeActivity;
import com.example.project_3.AttendeeBrowseEventsActivity;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import junit.extensions.TestSetup;

/**
 * JUnit test class for testing AttendeeActivity functionality.
 */
    // This file was mostly generated by ChatGPT, Made by OpenAI with the following prompt:
    // "make a Junit test for testing the following code, I'll type "DONE" as a message when i'm done sending files:"
    // I then include the AttendeeActivity code and then ran the next prompt
    //"can you output this same code with javadoc coments plz"
    //this code was generated on April 7th 2024
@RunWith(AndroidJUnit4.class)
public class AttendeeActivityTest {
    @Before
    public void setup() {
        ActivityScenario<AttendeeActivity> scenario = ActivityScenario.launch(AttendeeActivity.class);
        onView(withId(R.id.BrowseEventsButton)).perform(click());
        scenario.onActivity(activity -> {
            ListView eventListView = activity.findViewById(R.id.event_list);
            eventListView.performItemClick(null, 0, null);
        });
    }


    /**
     * Test case to check if the event list is initially empty.
     */
    @Test
    public void testEventListNotEmpty() {
        ActivityScenario<AttendeeActivity> scenario = ActivityScenario.launch(AttendeeActivity.class);
        scenario.onActivity(activity -> {
            ListView eventListView = activity.findViewById(R.id.event_listView);
            assertThat(eventListView.getCount(), greaterThan(0)); // Assuming initially the list is empty
        });
    }

    /**
     * Test case to check the functionality of the edit profile button.
     */
    @Test
    public void testEditProfileButton() {
        ActivityScenario<AttendeeActivity> scenario = ActivityScenario.launch(AttendeeActivity.class);
        scenario.onActivity(activity -> {
            FloatingActionButton editProfileButton = activity.findViewById(R.id.EditProfile);
            editProfileButton.performClick();

            // Assuming your logic correctly toggles visibility and replaces fragments
            assertThat(activity.findViewById(R.id.REST_OF_PAGE).getVisibility(), equalTo(View.INVISIBLE));
        });
    }

    /**
     * Test case to check the functionality of the browse events button.
     */
    @Test
    public void testBrowseEventsButton() {
        ActivityScenario<AttendeeActivity> scenario = ActivityScenario.launch(AttendeeActivity.class);
        scenario.onActivity(activity -> {
            FloatingActionButton browseEventsButton = activity.findViewById(R.id.BrowseEventsButton);
            browseEventsButton.performClick();

            Intent expectedIntent = new Intent(activity, AttendeeBrowseEventsActivity.class);
            Intent actualIntent = getAndAssertThatStartedActivityIsNotNull(expectedIntent);
            assertThat(actualIntent.getComponent(), equalTo(expectedIntent.getComponent()));
        });
    }

    /**
     * Utility method to get the started activity and assert that it is not null.
     *
     * @param expectedIntent The expected intent of the started activity.
     * @return The actual intent of the started activity.
     */
    private Intent getAndAssertThatStartedActivityIsNotNull(Intent expectedIntent) {
        Instrumentation.ActivityResult activityResult = new Instrumentation.ActivityResult(Activity.RESULT_OK, expectedIntent);
        Instrumentation.ActivityMonitor monitor = InstrumentationRegistry.getInstrumentation()
                .addMonitor(AttendeeBrowseEventsActivity.class.getName(), activityResult, true);

        assertThat(monitor.getResult(), notNullValue());
        return new Intent(monitor.getResult().getResultData());
    }

    // Add more tests as needed
}
